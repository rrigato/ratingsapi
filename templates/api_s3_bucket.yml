---
AWSTemplateFormatVersion: '2010-09-09'

#Transforms any serverless code to cloudformation
Transform: AWS::Serverless-2016-10-31

Description:
  'Television ratings api built with an api gateway frontend as a lambda proxy'

Parameters:

  apiStageName:
    Type: String
    Default: 'v1'   

  dynamoDbTableName:
    Type: String
    Default: 'prod_toonami_ratings'
    Description: Name of the dynamodb table

  environPrefix:
    Type: String
    Default: dev
    Description: String for prefixing resources to differentiate prod/dev


  projectName:
    Type: String
    Default: 'ratingsapi'
    Description: Name of the project


Conditions: 
  prodConfiguration: !Equals [ !Ref environPrefix, prod ]

Resources:

  #service linked role for apigateway to write to cloudwatch logs
  #for the entire account, only need to set this up for prod
  apigwToCwLogsServiceRole:
    Type: 'AWS::IAM::Role'
    Condition: prodConfiguration
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  developerPortalBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: BucketOwnerFullControl
      BucketName: !Sub 'dev-portal-${projectName}-${environPrefix}' 

  #iam role used by cloudwatch, only need this resource in the 
  #prod cloudformation stack
  restApiCwLogs:
    Type: 'AWS::ApiGateway::Account'
    Condition: prodConfiguration
    Properties:
      CloudWatchRoleArn: !GetAtt apigwToCwLogsServiceRole.Arn


  ratingsApiGw:
    Type: AWS::ApiGateway::RestApi
    Properties:
      #if we are deploying to prod we use EDGE, otherwise 
      #we use a regional endpoint
      EndpointConfiguration:
        Types:
          - !If [prodConfiguration, 'EDGE', 'REGIONAL']
      Name: !Sub '${projectName}-${environPrefix}'
      Description: API used for television ratings
      Tags:
          -
            Key: keep
            Value: 'yes'
          -
            Key: source
            Value: !Ref projectName

  ratingsRequestValidator:
    Type: AWS::ApiGateway::RequestValidator
    Properties:
      Name: !Sub '${projectName}-${environPrefix}-request-validation'
      RestApiId: !Ref ratingsApiGw
      ValidateRequestBody: false
      ValidateRequestParameters: true

  ratingsV1Deployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn: ratingsShowProxyMethod
    Properties:
      RestApiId: !Ref ratingsApiGw
      Description: Single stage deployment
      StageDescription:
        DataTraceEnabled: True
        LoggingLevel: INFO
        TracingEnabled: True
        Tags:
            -
              Key: keep
              Value: 'yes'
            -
              Key: source
              Value: !Ref projectName
      StageName: !Ref apiStageName


  ratingsUsagePlan:
    Type: 'AWS::ApiGateway::UsagePlan'
    DependsOn: ratingsV1Deployment
    Properties:
      ApiStages:
        - ApiId: !Ref ratingsApiGw
          Stage: !Ref apiStageName
      Description: Generic Usage plan
      Quota:
        Limit: 1000
        Period: MONTH
      Throttle:
        BurstLimit: 200
        RateLimit: 100
      UsagePlanName: all_clients

  #########################
  #Individual path resources/parameters with their lambda proxies
  #########################
  ratingsNightsResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ratingsApiGw
      ParentId: !GetAtt ratingsApiGw.RootResourceId
      PathPart: 'nights'

  ratingsNightsProxyResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ratingsApiGw
      ParentId: !Ref ratingsNightsResource
      PathPart: '{night}'

  ####################################################
  #Docs for giving api gateway permission to invoke a lambda function
  #https://docs.aws.amazon.com/lambda/latest/dg/services-apigateway.html#apigateway-permissions
  ####################################################
  ratingsNightPermission: 
    Type: AWS::Lambda::Permission 
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt nightsEndpoint.Arn
      Principal: apigateway.amazonaws.com
      #allow any stage to perform http get on the /nights/{night} path
      SourceArn: !Join [ '', [!Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:',
        !Ref ratingsApiGw, '/*/GET/nights/*']]

  ratingsNightProxyMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      ApiKeyRequired: True # pragma: allowlist secret
      RestApiId: !Ref ratingsApiGw
      ResourceId: !Ref ratingsNightsProxyResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${nightsEndpoint.Arn}/invocations



  nightsEndpoint:
    Type: AWS::Serverless::Function
    Properties:                               
      Description: |
        Lambda function to handle nights endpoint
      #passed to os.environ for lambda python script
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref dynamoDbTableName

      FunctionName: !Sub '${projectName}-nights-endpoint-${environPrefix}'
      Handler: index.handler

      #Policies to include in the lambda basic execution role
      #created by SAM
      Policies:
        Version: '2012-10-17'
        Statement: 
          #dynamodb permissions     
          - Sid: !Sub '${projectName}LambdaDynamoDbAllow'
            Effect: Allow
            Action:
              - dynamodb:ListTables
              - dynamodb:GetItem
              - dynamodb:Query

            Resource:
              - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${dynamoDbTableName}'  
              - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${dynamoDbTableName}/index/SHOW_ACCESS'     
              - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${dynamoDbTableName}/index/YEAR_ACCESS'
      Runtime: python3.7
      Tracing: Active
      #60 second timeout
      Timeout: 5
      #Default code that will be updated by
      #CodeBuild Job
      InlineCode: |
        def handler(event, context):
          print("Hello, world!")
    Tags:
      -
        Key: keep
        Value: 'yes'
      -
        Key: source
        Value: !Ref projectName


  ratingsSearchResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ratingsApiGw
      ParentId: !GetAtt ratingsApiGw.RootResourceId
      PathPart: 'search'

  ratingsSearchPermission: 
    Type: AWS::Lambda::Permission 
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt searchEndpoint.Arn
      Principal: apigateway.amazonaws.com
      #allow any stage to perform http get on the /search path
      SourceArn: !Join [ '', [!Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:',
        !Ref ratingsApiGw, '/*/GET/search*']]

  ratingsSearchProxyMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      ApiKeyRequired: True
      RequestValidatorId: !Ref ratingsRequestValidator 
      #required query parameters, request will not be passed to
      #lambda if these are not provided
      RequestParameters:
        method.request.querystring.startDate: true
        method.request.querystring.endDate: true
      RestApiId: !Ref ratingsApiGw
      ResourceId: !Ref ratingsSearchResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${searchEndpoint.Arn}/invocations



  searchEndpoint:
    Type: AWS::Serverless::Function
    Properties:                               
      Description: |
        Lambda function to handle search endpoint
      #passed to os.environ for lambda python script
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref dynamoDbTableName

      FunctionName: !Sub '${projectName}-search-endpoint-${environPrefix}'
      Handler: index.handler

      #Policies to include in the lambda basic execution role
      #created by SAM
      Policies:
        Version: '2012-10-17'
        Statement: 
          #dynamodb permissions     
          - Sid: !Sub '${projectName}LambdaDynamoDbAllow'
            Effect: Allow
            Action:
              - dynamodb:ListTables
              - dynamodb:GetItem
              - dynamodb:Query

            Resource:
              - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${dynamoDbTableName}'  
              - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${dynamoDbTableName}/index/SHOW_ACCESS'     
              - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${dynamoDbTableName}/index/YEAR_ACCESS'
      Runtime: python3.7
      Tracing: Active
      #60 second timeout
      Timeout: 5
      #Default code that will be updated by
      #CodeBuild Job
      InlineCode: |
        def handler(event, context):
          print("Hello, world!")
    Tags:
      -
        Key: keep
        Value: 'yes'
      -
        Key: source
        Value: !Ref projectName


  ratingsShowsResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ratingsApiGw
      ParentId: !GetAtt ratingsApiGw.RootResourceId
      PathPart: 'shows'

  ratingsShowsProxyResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ratingsApiGw
      ParentId: !Ref ratingsShowsResource
      PathPart: '{show}'

  ####################################################
  #Docs for giving api gateway permission to invoke a lambda function
  #https://docs.aws.amazon.com/lambda/latest/dg/services-apigateway.html#apigateway-permissions
  ####################################################
  ratingsShowPermission: 
    Type: AWS::Lambda::Permission 
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt showsEndpoint.Arn
      Principal: apigateway.amazonaws.com
      #allow any stage to perform http get on the /shows/{show} path
      SourceArn: !Join [ '', [!Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:',
        !Ref ratingsApiGw, '/*/GET/shows/*']]

  ratingsShowProxyMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      ApiKeyRequired: True
      RestApiId: !Ref ratingsApiGw
      ResourceId: !Ref ratingsShowsProxyResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${showsEndpoint.Arn}/invocations



  showsEndpoint:
    Type: AWS::Serverless::Function
    Properties:                               
      Description: |
        Lambda function to handle shows endpoint
      #passed to os.environ for lambda python script
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref dynamoDbTableName

      FunctionName: !Sub '${projectName}-shows-endpoint-${environPrefix}'
      Handler: index.handler

      #Policies to include in the lambda basic execution role
      #created by SAM
      Policies:
        Version: '2012-10-17'
        Statement: 
          #dynamodb permissions     
          - Sid: !Sub '${projectName}LambdaDynamoDbAllow'
            Effect: Allow
            Action:
              - dynamodb:ListTables
              - dynamodb:GetItem
              - dynamodb:Query

            Resource:
              - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${dynamoDbTableName}'  
              - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${dynamoDbTableName}/index/SHOW_ACCESS'     
              - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${dynamoDbTableName}/index/YEAR_ACCESS'
      Runtime: python3.7
      Tracing: Active
      #60 second timeout
      Timeout: 5
      #Default code that will be updated by
      #CodeBuild Job
      InlineCode: |
        def handler(event, context):
          print("Hello, world!")
    Tags:
      -
        Key: keep
        Value: 'yes'
      -
        Key: source
        Value: !Ref projectName


  ratingsYearsResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ratingsApiGw
      ParentId: !GetAtt ratingsApiGw.RootResourceId
      PathPart: 'years'

  ratingsYearsProxyResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ratingsApiGw
      ParentId: !Ref ratingsYearsResource
      PathPart: '{year}'

  ratingsYearsPermission: 
    Type: AWS::Lambda::Permission 
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt yearsEndpoint.Arn
      Principal: apigateway.amazonaws.com
      #allow any stage to perform http get on the /years/{year} path
      SourceArn: !Join [ '', [!Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:',
        !Ref ratingsApiGw, '/*/GET/years/*']]

  ratingsYearsProxyMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      ApiKeyRequired: True
      RestApiId: !Ref ratingsApiGw
      ResourceId: !Ref ratingsYearsProxyResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${yearsEndpoint.Arn}/invocations



  yearsEndpoint:
    Type: AWS::Serverless::Function
    Properties:                               
      Description: |
        Lambda function to handle years endpoint
      #passed to os.environ for lambda python script
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref dynamoDbTableName

      FunctionName: !Sub '${projectName}-years-endpoint-${environPrefix}'
      Handler: index.handler

      #Policies to include in the lambda basic execution role
      #created by SAM
      Policies:
        Version: '2012-10-17'
        Statement: 
          #dynamodb permissions     
          - Sid: !Sub '${projectName}LambdaDynamoDbAllow'
            Effect: Allow
            Action:
              - dynamodb:ListTables
              - dynamodb:GetItem
              - dynamodb:Query

            Resource:
              - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${dynamoDbTableName}'  
              - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${dynamoDbTableName}/index/SHOW_ACCESS'     
              - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${dynamoDbTableName}/index/YEAR_ACCESS'
      Runtime: python3.7
      Tracing: Active
      #60 second timeout
      Timeout: 5
      #Default code that will be updated by
      #CodeBuild Job
      InlineCode: |
        def handler(event, context):
          print("Hello, world!")
    Tags:
      -
        Key: keep
        Value: 'yes'
      -
        Key: source
        Value: !Ref projectName


Outputs:
  ratingsApigatewayId:
    Value: !Ref ratingsApiGw